
#******************************************************************************
#       @ 2015-12-25: JJongspi
#******************************************************************************

# Toolchain Path
GCC_TOOLCHAIN_PATH	= ${BUILD_PATH}/toolchain/gcc/arm-2013.11
TOOLCHAIN_PATH		= ${GCC_TOOLCHAIN_PATH}/bin

# Compiler
CC			= ${TOOLCHAIN_PATH}/arm-none-eabi-gcc

# Compiler Options
CFLAGS			=				\
			-mcpu=cortex-m3			\
			-march=armv7-m			\
			-mthumb				\
			-mlittle-endian			\
			-c				\
			-gdwarf-2			\
			-O0				\
			-Wall				\
			-mlong-calls

# Archiver
AR			= ${TOOLCHAIN_PATH}/arm-none-eabi-ar

# Archiver Options
AFLAGS			=				\
			-mcpu=cortex-m3			\
			-march=armv7-m			\
			â€“mthumb				\
			--keep				\
			-gdwarf2			\
			--apcs=/interwork		\
			-mthumb-interwork		\
			--unsafe

# Linker
LD			= ${TOOLCHAIN_PATH}/arm-none-eabi-ld

# Linker Options
LDFLAGS			=				\
			--cref				\
			-t				\
			-static				\
			-nostartfiles			\
			-L${GCC_TOOLCHAIN_PATH}/arm-none-eabi/lib		\
			-L${GCC_TOOLCHAIN_PATH}/lib/gcc/arm-none-eabi/4.8.1	\
			-Map ${OUTPUT}/symbol.map	\
			-stats

# Get the location of libgcc.a from the GCC front-end.
LIBGCC			= ${shell ${CC} -mthumb -march=armv7-m -print-libgcc-file-name}

# Get the location of libc.a from the GCC front-end.
LIBC			= ${shell ${CC} -mthumb -march=armv7-m -print-file-name=libc.a}

# The command for extracting images from the linked executables.
OBJCOPY			= ${TOOLCHAIN_PATH}/arm-none-eabi-objcopy

# The debugger to be used.
DEBUGGER		= gdb

OUTPUT			= output

#******************************************************************************
# The rule for building the object file from each C source file.
#******************************************************************************
${OUTPUT}/%.o: %.c
	@if [ 'x${VERBOSE}' = x ];					\
	then								\
		echo "  CC  ${<}";					\
	else								\
		echo ${CC} ${CFLAGS} -D${OUTPUT} -o ${@} -c ${<};	\
	fi

	@${CC} ${CFLAGS} -D${OUTPUT} -o ${@} -c ${<}

#******************************************************************************
# The rule for building the object file from each assembly source file.
#******************************************************************************
${OUTPUT}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];					\
	then								\
		echo "  CC  ${<}";					\
	else								\
		echo ${CC} ${AFLAGS} -D${OUTPUT} -o ${@} -c ${<};	\
	fi

	@${CC} ${AFLAGS} -D${OUTPUT} -o ${@} -c ${<}

#******************************************************************************
# The rule for creating an object library.
#******************************************************************************
${OUTPUT}/%.a:
	@if [ 'x${VERBOSE}' = x ];					\
	then								\
		echo "  AR  ${@}";					\
	else								\
		echo ${AR} -cr ${@} ${^};				\
	fi

	@${AR} -cr ${@} ${^}

#******************************************************************************
# The rule for linking the application.
#******************************************************************************
${OUTPUT}/%.axf:
	@if [ 'x${VERBOSE}' = x ];					\
	then								\
		echo "  LD  ${@}";					\
	fi

	@if [ 'x${VERBOSE}' != x ];					\
	then								\
		echo ${LD} -T ${SCATTER_${notdir ${@:.axf=}}}		\
			--entry ${ENTRY_${notdir ${@:.axf=}}}		\
			${LDFLAGSgcc_${notdir ${@:.axf=}}}		\
			${LDFLAGS} -o ${@} ${^}				\
			'${LIBC}' '${LIBGCC}';				\
	fi

	@${LD} -T ${SCATTER_${notdir ${@:.axf=}}}			\
		--entry ${ENTRY_${notdir ${@:.axf=}}}			\
		${LDFLAGSgcc_${notdir ${@:.axf=}}}			\
		${LDFLAGS} -o ${@} ${^}					\
		'${LIBC}' '${LIBGCC}'

	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}
	@./build/bin2hex ${OUTPUT}/TCCortexM.bin CM4_earlycam.h
	@mv CM4_earlycam.h ${OUTPUT}/
	@cp ${OUTPUT}/CM4_earlycam.h ../../../platform/${PLATFORM}/include/platform/

